// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  name              String
  email             String   @unique
  googleId          String   @unique
  avatarUrl         String?
  city              String   @default("Mozelos")
  lat               Float?
  lng               Float?
  bio               String?  @db.Text
  role              Role     @default(USER) // USER, ADMIN
  isActive          Boolean  @default(true) // Active user status for blocking
  ratingAvg         Float?   @default(0)
  emailNotifications Boolean  @default(true)
  skills            UserSkill[]
  requests          Request[]   @relation("UserRequests")
  applications      Application[]
  messages          Message[]
  reviewsGiven      Review[] @relation("ReviewsGiven")
  reviewsRecv       Review[] @relation("ReviewsRecv")
  notifications     Notification[]
  reportsGiven      Report[] @relation("ReportsGiven")
  reportsReceived   Report[] @relation("ReportsReceived")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users UserSkill[]

  @@map("skills")
}

model UserSkill {
  userId  String
  skillId String
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill   Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  @@id([userId, skillId])
  @@map("user_skills")
}

model Request {
  id            String   @id @default(cuid())
  requesterId   String
  requester     User     @relation("UserRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  title         String
  description   String   @db.Text
  category      String
  imageUrls     String[]  @default([])
  isPaid        Boolean  @default(false)
  budgetCents   Int?
  status        RequestStatus @default(OPEN) // OPEN, IN_PROGRESS, DONE, CANCELLED
  scheduledFrom DateTime?
  scheduledTo   DateTime?
  city          String   @default("Mozelos")
  lat           Float
  lng           Float
  applications  Application[]
  messages      Message[]
  reviews       Review[]
  reports       Report[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("requests")
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  DONE
  CANCELLED
  STANDBY
  REQUIRES_IMPROVEMENT
}

model Application {
  id        String   @id @default(cuid())
  requestId String
  helperId  String
  message   String?
  status    ApplicationStatus @default(APPLIED) // APPLIED, ACCEPTED, REJECTED
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  helper    User     @relation(fields: [helperId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("applications")
}

enum ApplicationStatus {
  APPLIED
  ACCEPTED
  REJECTED
}

model Message {
  id        String   @id @default(cuid())
  requestId String
  senderId  String
  text      String   @db.Text
  createdAt DateTime @default(now())
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Review {
  id          String   @id @default(cuid())
  requestId   String
  reviewerId  String
  revieweeId  String
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  request     Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  reviewer    User     @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee    User     @relation("ReviewsRecv", fields: [revieweeId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Report {
  id            String   @id @default(cuid())
  reporterId    String
  targetUserId  String?
  requestId     String?
  reason        String   @db.Text
  status        String   @default("PENDING")
  adminNotes    String?  @db.Text
  createdAt     DateTime @default(now())
  reporter      User     @relation("ReportsGiven", fields: [reporterId], references: [id], onDelete: Cascade)
  targetUser    User?    @relation("ReportsReceived", fields: [targetUserId], references: [id], onDelete: Cascade)
  request       Request? @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String   @db.Text
  data      Json?
  read      Boolean  @default(false)
  emailSent Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  NEW_APPLICATION     // Algu√©m se candidatou ao teu pedido
  APPLICATION_ACCEPTED // A tua candidatura foi aceite
  APPLICATION_REJECTED // A tua candidatura foi rejeitada
  NEW_MESSAGE         // Nova mensagem
  REQUEST_STATUS_CHANGED // Pedido mudou de estado
  NEW_REVIEW          // Recebeste uma review
  ADMIN_WARNING       // Aviso administrativo
  USER_BLOCKED        // Utilizador bloqueado
}